stroke = FALSE,
fillOpacity = 0.7)
pal <- colorFactor(c("navy", "red"), domain = c(71, 72))
addCircleMarkers(m, lng = df72$x_pos, lat=df72$y_pos,
radius = 3,
color = ~pal(cl_cd),
stroke = FALSE,
fillOpacity = 0.7)
pal(71)
pal <- colorFactor(c("navy", "red"), domain = c("71", "72"))
addCircleMarkers(m, lng = df72$x_pos, lat=df72$y_pos,
radius = 3,
color = ~pal(cl_cd),
stroke = FALSE,
fillOpacity = 0.7)
addCircleMarkers(m, lng = df72$x_pos, lat=df72$y_pos,
radius = 3,
color = pal(cl_cd),
stroke = FALSE,
fillOpacity = 0.7)
addCircleMarkers(m, lng = df$x_pos, lat=df$y_pos,
radius = 3,
color = pal(df$cl_cd),
stroke = FALSE,
fillOpacity = 0.7)
m <- leaflet() %>%
addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
setView(lng = 127.5, lat = 34.3601, zoom = 5)
addCircleMarkers(m, lng = df$x_pos, lat=df$y_pos,
radius = 3,
color = pal(df$cl_cd),
stroke = FALSE,
fillOpacity = 0.7)
df73 <- getMedIns(73)
pal <- colorFactor(c("navy", "red", "yellow"),
domain = c("71", "72", "73"))
df <- bind_rows(df71, df72, df73)
addCircleMarkers(m, lng = df$x_pos, lat=df$y_pos,
radius = 3,
color = pal(df$cl_cd),
stroke = FALSE,
fillOpacity = 0.7)
pal <- colorFactor(c("red", "green", "yellow"),
domain = c("71", "72", "73"))
addCircleMarkers(m, lng = df$x_pos, lat=df$y_pos,
radius = 3,
color = pal(df$cl_cd),
stroke = FALSE,
fillOpacity = 0.7)
pharm <- getMedIns(81)
addCircleMarkers(m, lng = pharm$x_pos, lat=pharm$y_pos,
radius = 3,
color = pal(pharm$cl_cd),
stroke = FALSE,
fillOpacity = 0.7)
pal <- colorFactor(c("red", "green", "yellow", "blue"),
domain = c("71", "72", "73", "81"))
addCircleMarkers(m, lng = pharm$x_pos, lat=pharm$y_pos,
radius = 3,
color = pal(pharm$cl_cd),
stroke = FALSE,
fillOpacity = 0.7)
addCircleMarkers(m, lng = pharm$x_pos, lat=pharm$y_pos,
radius = 3,
color = "orange",
stroke = FALSE,
fillOpacity = 0.5)
addCircleMarkers(m, lng = pharm$x_pos, lat=pharm$y_pos,
radius = 1,
color = "orange",
stroke = FALSE,
fillOpacity = 0.3)
addCircleMarkers(m, lng = df$x_pos, lat=df$y_pos,
radius = 1,
color = pal(df$cl_cd),
stroke = FALSE,
fillOpacity = 0.3)
addCircleMarkers(m, lng = df$x_pos, lat=df$y_pos,
radius = 2,
color = pal(df$cl_cd),
stroke = FALSE,
fillOpacity = 0.4)
addCircleMarkers(m, lng = pharm$x_pos, lat=pharm$y_pos,
radius = 2,
color = "orange",
stroke = FALSE,
fillOpacity = 0.4)
library(httr)
library(jsonlite)
library(dplyr)
library(leaflet)
url <- "http://www.g-health.kr/portal/health/pubHealthSearch/get_list.do"
# url <- "http://www.g-health.kr/portal/health/pubHealthSearch/get_pageinfo.do"
getMedIns <- function(code) {
# code 71, 72, 73 Bogeonso
# code 81 Pharmacy
pl <- list(cl_cd=code, rows=10000, cpage=1)
r <- POST(url,
body = pl,
add_headers(
'Content_Type' =
'application/x-www-form-urlencoded; charset=UTF-8'
)
)
res <- content(r,"text")
df <- jsonlite::fromJSON(res)
df <- df %>%
filter(x_pos != '') %>%
filter(y_pos != '') %>%
filter(cl_cd != '')
return(df)
}
bg71 <- getMedIns(71)
bg72 <- getMedIns(72)
bg73 <- getMedIns(73)
bg <- bind_rows(bg71, bg72, bg73)
pharm <- getMedIns(81)
m <- leaflet() %>%
addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
setView(lng = 127.5, lat = 34.3601, zoom = 5)
pal <- colorFactor(c("red", "green", "yellow", "blue"),
domain = c("71", "72", "73", "81"))
addCircleMarkers(m, lng = bg$x_pos, lat=bg$y_pos,
radius = 2,
color = pal(bg$cl_cd),
stroke = FALSE,
fillOpacity = 0.4)
addCircleMarkers(m, lng = pharm$x_pos, lat=pharm$y_pos,
radius = 2,
color = "orange",
stroke = FALSE,
fillOpacity = 0.4)
m <- leaflet() %>%
addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
setView(lng = 127.5, lat = 34.3601, zoom = 7)
m
m <- leaflet() %>%
addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
setView(lng = 127.5, lat = 35.3601, zoom = 7)
ㅡ
m
m <- leaflet() %>%
addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
setView(lng = 127.5, lat = 35.7, zoom = 7)
m
m <- leaflet() %>%
addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
setView(lng = 127.5, lat = 35.9, zoom = 7)
m
m <- leaflet() %>%
addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
setView(lng = 127.5, lat = 36, zoom = 7)
pal <- colorFactor(c("red", "green", "yellow", "orange"),
domain = c("71", "72", "73", "81"))
addCircleMarkers(m, lng = bg$x_pos, lat=bg$y_pos,
radius = 2,
color = pal(bg$cl_cd),
stroke = FALSE,
fillOpacity = 0.4)
library(httr)
library(jsonlite)
library(dplyr)
library(leaflet)
# 공공보건포털 xhr
url <- "http://www.g-health.kr/portal/health/pubHealthSearch/get_list.do"
# 보건기관 코드에 따라 데이터 가져오기
getMedIns <- function(code) {
# code 71, 72, 73 Bogeonso
# code 81 Pharmacy
pl <- list(cl_cd=code, rows=30000, cpage=1)
r <- POST(url,
body = pl,
add_headers(
'Content_Type' =
'application/x-www-form-urlencoded; charset=UTF-8'
)
)
res <- content(r,"text")
df <- jsonlite::fromJSON(res)
# 경위도 없는 데이터 제외
df <- df %>%
filter(x_pos != '') %>%
filter(y_pos != '') %>%
filter(cl_cd != '')
return(df)
}
# 보건소, 보건지소, 보건진료소
bg71 <- getMedIns(71)
bg72 <- getMedIns(72)
bg73 <- getMedIns(73)
bg <- bind_rows(bg71, bg72, bg73)
# 약국
pharm <- getMedIns(81)
m <- leaflet() %>%
addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
setView(lng = 127.5, lat = 36, zoom = 7)
pal <- colorFactor(c("red", "green", "yellow", "orange"),
domain = c("71", "72", "73", "81"))
addCircleMarkers(m, lng = bg$x_pos, lat=bg$y_pos,
radius = 2,
color = pal(bg$cl_cd),
stroke = FALSE,
fillOpacity = 0.4)
addCircleMarkers(m, lng = pharm$x_pos, lat=pharm$y_pos,
radius = 2,
color = pal(pharm$cl_cd),
stroke = FALSE,
fillOpacity = 0.4)
library(httr)
library(jsonlite)
library(dplyr)
library(leaflet)
# 공공보건포털 xhr
url <- "http://www.g-health.kr/portal/health/pubHealthSearch/get_list.do"
# 보건기관 코드에 따라 데이터 가져오기
getMedIns <- function(code) {
# code 71, 72, 73 Bogeonso
# code 81 Pharmacy
pl <- list(cl_cd=code, rows=30000, cpage=1)
r <- POST(url,
body = pl,
add_headers(
'Content_Type' =
'application/x-www-form-urlencoded; charset=UTF-8'
)
)
res <- content(r,"text")
df <- jsonlite::fromJSON(res)
# 경위도 없는 데이터 제외
df <- df %>%
filter(x_pos != '') %>%
filter(y_pos != '') %>%
filter(cl_cd != '')
return(df)
}
# 보건소, 보건지소, 보건진료소
bg71 <- getMedIns(71)
bg72 <- getMedIns(72)
bg73 <- getMedIns(73)
bg <- bind_rows(bg71, bg72, bg73)
# 약국
pharm <- getMedIns(81)
m <- leaflet() %>%
addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
setView(lng = 127.5, lat = 36, zoom = 7)
pal <- colorFactor(c("red", "green", "yellow", "orange"),
domain = c("71", "72", "73", "81"))
addCircleMarkers(m, lng = bg$x_pos, lat=bg$y_pos,
radius = 2,
color = pal(bg$cl_cd),
stroke = FALSE,
fillOpacity = 0.4)
addCircleMarkers(m, lng = pharm$x_pos, lat=pharm$y_pos,
radius = 2,
color = pal(pharm$cl_cd),
stroke = FALSE,
fillOpacity = 0.4)
install.packages(deldir)
install.packages("deldir")
voronoi <- deldir(bg71$x_pos, bg71$y_pos)
require(deldir)
voronoi <- deldir(bg71$x_pos, bg71$y_pos)
voronoi <- deldir(as.numeric(bg71$x_pos), as.numeric(bg71$y_pos))
plot(voronoi)
plot(voronoi, wlines="tess", wpoints="none", number=FALSE, add=TRUE, lty=1)
tile.list
tile.list(voronoi)
voronoi <- create_voronoi_df(cbind(df71$x_pos, df72$y_pos), df71)
create_voronoi_df <- function(sp) {
# tile.list extracts the polygon data from the deldir computation
vor_desc <- tile.list(deldir(sp@coords[,1], sp@coords[,2]))
lapply(1:(length(vor_desc)), function(i) {
# tile.list gets us the points for the polygons but we
# still have to close them, hence the need for the rbind
tmp <- cbind(vor_desc[[i]]$x, vor_desc[[i]]$y)
tmp <- rbind(tmp, tmp[1,])
# now we can make the Polygon(s)
Polygons(list(Polygon(tmp)), ID=i)
}) -> vor_polygons
# hopefully the caller passed in good metadata!
sp_dat <- sp@data
# this way the IDs _should_ match up w/the data & voronoi polys
rownames(sp_dat) <- sapply(slot(SpatialPolygons(vor_polygons),
'polygons'),
slot, 'ID')
SpatialPolygonsDataFrame(SpatialPolygons(vor_polygons),
data=sp_dat)
}
voronoi <- create_voronoi_df(cbind(df71$x_pos, df72$y_pos), df71)
library(sp)
vor_spdf <- SpatialPointsDataFrame(cbind(df71$x_pos,
df71$y_pos),
df71, match.ID=TRUE)
getMedIns <- function(code) {
# code 71, 72, 73 Bogeonso
# code 81 Pharmacy
pl <- list(cl_cd=code, rows=30000, cpage=1)
r <- POST(url,
body = pl,
add_headers(
'Content_Type' =
'application/x-www-form-urlencoded; charset=UTF-8'
)
)
res <- content(r,"text")
df <- jsonlite::fromJSON(res)
# 경위도 없는 데이터 제외
df <- df %>%
filter(x_pos != '') %>%
filter(y_pos != '') %>%
filter(cl_cd != '')
df$x_pos <- as.numeric(df$x_pos)
df$y_pos <- as.numeric(df$y_pos)
return(df)
}
bg71 <- getMedIns(71)
library(httr)
library(jsonlite)
library(dplyr)
library(leaflet)
library(deldir)
library(sp)
# 공공보건포털 xhr
url <- "http://www.g-health.kr/portal/health/pubHealthSearch/get_list.do"
# 보건기관 코드에 따라 데이터 가져오기
getMedIns <- function(code) {
# code 71, 72, 73 Bogeonso
# code 81 Pharmacy
pl <- list(cl_cd=code, rows=30000, cpage=1)
r <- POST(url,
body = pl,
add_headers(
'Content_Type' =
'application/x-www-form-urlencoded; charset=UTF-8'
)
)
res <- content(r,"text")
df <- jsonlite::fromJSON(res)
# 경위도 없는 데이터 제외
df <- df %>%
filter(x_pos != '') %>%
filter(y_pos != '') %>%
filter(cl_cd != '')
df$x_pos <- as.numeric(df$x_pos)
df$y_pos <- as.numeric(df$y_pos)
return(df)
}
# 보건소, 보건지소, 보건진료소
bg71 <- getMedIns(71)
bg72 <- getMedIns(72)
bg73 <- getMedIns(73)
bg <- bind_rows(bg71, bg72, bg73)
# 약국
pharm <- getMedIns(81)
m <- leaflet() %>%
addTiles('http://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}.png') %>%
setView(lng = 127.5, lat = 36, zoom = 7)
pal <- colorFactor(c("red", "green", "yellow", "orange"),
domain = c("71", "72", "73", "81"))
addCircleMarkers(m, lng = bg$x_pos, lat=bg$y_pos,
radius = 2,
color = pal(bg$cl_cd),
stroke = FALSE,
fillOpacity = 0.4)
addCircleMarkers(m, lng = pharm$x_pos, lat=pharm$y_pos,
radius = 2,
color = pal(pharm$cl_cd),
stroke = FALSE,
fillOpacity = 0.4)
create_voronoi_df <- function(sp) {
# tile.list extracts the polygon data from the deldir computation
vor_desc <- tile.list(deldir(sp@coords[,1], sp@coords[,2]))
lapply(1:(length(vor_desc)), function(i) {
# tile.list gets us the points for the polygons but we
# still have to close them, hence the need for the rbind
tmp <- cbind(vor_desc[[i]]$x, vor_desc[[i]]$y)
tmp <- rbind(tmp, tmp[1,])
# now we can make the Polygon(s)
Polygons(list(Polygon(tmp)), ID=i)
}) -> vor_polygons
# hopefully the caller passed in good metadata!
sp_dat <- sp@data
# this way the IDs _should_ match up w/the data & voronoi polys
rownames(sp_dat) <- sapply(slot(SpatialPolygons(vor_polygons),
'polygons'),
slot, 'ID')
SpatialPolygonsDataFrame(SpatialPolygons(vor_polygons),
data=sp_dat)
}
vor_spdf <- SpatialPointsDataFrame(cbind(bg71$x_pos,
bg71$y_pos),
bg71, match.ID=TRUE)
voronoi_polygons <- function(sp) {
# tile.list extracts the polygon data from the deldir computation
vor_desc <- tile.list(deldir(sp@coords[,1], sp@coords[,2]))
lapply(1:(length(vor_desc)), function(i) {
# tile.list gets us the points for the polygons but we
# still have to close them, hence the need for the rbind
tmp <- cbind(vor_desc[[i]]$x, vor_desc[[i]]$y)
tmp <- rbind(tmp, tmp[1,])
# now we can make the Polygon(s)
Polygons(list(Polygon(tmp)), ID=i)
}) -> vor_polygons
# hopefully the caller passed in good metadata!
sp_dat <- sp@data
# this way the IDs _should_ match up w/the data & voronoi polys
rownames(sp_dat) <- sapply(slot(SpatialPolygons(vor_polygons),
'polygons'),
slot, 'ID')
SpatialPolygonsDataFrame(SpatialPolygons(vor_polygons),
data=sp_dat)
}
vp <- voronoi_polygons(vor_spdf)
addPolygons(data=vor_polygons,
stroke=TRUE, color="#a5a5a5", weight=0.25,
fill=TRUE, fillOpacity = 0.0,
smoothFactor=0.5)
vor_polygons <- create_voronoi_polygons(vor_spdf)
create_voronoi_polygons <- function(sp) {
# tile.list extracts the polygon data from the deldir computation
vor_desc <- tile.list(deldir(sp@coords[,1], sp@coords[,2]))
lapply(1:(length(vor_desc)), function(i) {
# tile.list gets us the points for the polygons but we
# still have to close them, hence the need for the rbind
tmp <- cbind(vor_desc[[i]]$x, vor_desc[[i]]$y)
tmp <- rbind(tmp, tmp[1,])
# now we can make the Polygon(s)
Polygons(list(Polygon(tmp)), ID=i)
}) -> vor_polygons
# hopefully the caller passed in good metadata!
sp_dat <- sp@data
# this way the IDs _should_ match up w/the data & voronoi polys
rownames(sp_dat) <- sapply(slot(SpatialPolygons(vor_polygons),
'polygons'),
slot, 'ID')
SpatialPolygonsDataFrame(SpatialPolygons(vor_polygons),
data=sp_dat)
}
vor_polygons <- create_voronoi_polygons(vor_spdf)
addPolygons(data=vor_polygons,
stroke=TRUE, color="#a5a5a5", weight=0.25,
fill=TRUE, fillOpacity = 0.0,
smoothFactor=0.5)
addPolygons(m, data=vor_polygons,
stroke=TRUE, color="#a5a5a5", weight=0.25,
fill=TRUE, fillOpacity = 0.0,
smoothFactor=0.5)
addPolygons(m, data=vor_polygons,
stroke=TRUE, color="orange", weight=0.25,
fill=TRUE, fillOpacity = 0.0,
smoothFactor=0.5)
addPolygons(m, data=vor_polygons,
stroke=TRUE, color="orange", weight=0.5,
fill=TRUE, fillOpacity = 0.0,
smoothFactor=0.5)
vor_points <- SpatialPointsDataFrame(cbind(bg$x_pos,
bg$y_pos),
bg, match.ID=TRUE)
vor_polygons <- create_voronoi_polygons(vor_spdf)
addPolygons(m, data=vor_polygons,
stroke=TRUE, color="orange", weight=0.5,
fill=TRUE, fillOpacity = 0.0,
smoothFactor=0.5)
vor_polygons <- create_voronoi_polygons(vor_points)
vor_points <- SpatialPointsDataFrame(cbind(bg$x_pos,
bg$y_pos),
bg, match.ID=TRUE)
vor_polygons <- create_voronoi_polygons(vor_points)
vor_points <- SpatialPointsDataFrame(cbind(bg72$x_pos,
bg72$y_pos),
bg72, match.ID=TRUE)
vor_polygons <- create_voronoi_polygons(vor_points)
vor_points <- SpatialPointsDataFrame(cbind(bg71$x_pos,
bg71$y_pos),
bg71, match.ID=TRUE)
vor_polygons <- create_voronoi_polygons(vor_points)
addPolygons(m, data=vor_polygons,
stroke=TRUE, color="orange", weight=0.5,
fill=TRUE, fillOpacity = 0.0,
smoothFactor=0.5)
vor_points <- SpatialPointsDataFrame(cbind(bg72$x_pos,
bg72$y_pos),
bg72, match.ID=FALSE)
vor_polygons <- create_voronoi_polygons(vor_points)
vor_points <- SpatialPointsDataFrame(cbind(bg72$x_pos,
bg72$y_pos),
bg72, match.ID=TRUE)
vor_polygons <- create_voronoi_polygons(vor_points)
create_voronoi_polygons <- function(sp) {
# tile.list extracts the polygon data from the deldir computation
vor_desc <- tile.list(deldir(sp@coords[,1], sp@coords[,2]))
lapply(1:(length(vor_desc)), function(i) {
# tile.list gets us the points for the polygons but we
# still have to close them, hence the need for the rbind
tmp <- cbind(vor_desc[[i]]$x, vor_desc[[i]]$y)
tmp <- rbind(tmp, tmp[1,])
# now we can make the Polygon(s)
Polygons(list(Polygon(tmp)), ID=i)
}) -> vor_polygons
# hopefully the caller passed in good metadata!
sp_dat <- sp@data
# this way the IDs _should_ match up w/the data & voronoi polys
# rownames(sp_dat) <- sapply(slot(SpatialPolygons(vor_polygons),
#                                 'polygons'),
#                            slot, 'ID')
SpatialPolygonsDataFrame(SpatialPolygons(vor_polygons),
data=sp_dat)
}
vor_points <- SpatialPointsDataFrame(cbind(bg72$x_pos,
bg72$y_pos),
bg72, match.ID=FALSE)
vor_polygons <- create_voronoi_polygons(vor_points)
