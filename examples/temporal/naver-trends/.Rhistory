par(family='Apple SD Gothic Neo')
plot(g, vertex.size=2,
vertex.label.family='Apple SD Gothic Neo', vertex.label.cex=2,
edge.width = 5)
max(sdf$value)
min(sdf$value)
24000*0.0001
24000*0.0003
24000*0.0003
E(g)$value
par(family='Apple SD Gothic Neo')
plot(g, vertex.size=2,
vertex.label.family='Apple SD Gothic Neo', vertex.label.cex=2,
edge.width = E(g)$value * 0.003)
par(family='Apple SD Gothic Neo')
plot(g, vertex.size=2,
vertex.label.family='Apple SD Gothic Neo', vertex.label.cex=2,
edge.width = E(g)$value * 0.003, edge.arrow.size=E(g)$value * 0.003 * 0.8)
par(family='Apple SD Gothic Neo')
edgeScale = 0.002
plot(g, vertex.size=2,
vertex.label.family='Apple SD Gothic Neo', vertex.label.cex=2,
edge.width = E(g)$value * edgeScale, edge.arrow.size=E(g)$value * edgeScale * 0.8,
edge.color = rgb(30,30,30,.2),)
par(family='Apple SD Gothic Neo')
edgeScale = 0.002
plot(g, vertex.size=2,
vertex.label.family='Apple SD Gothic Neo', vertex.label.cex=2,
edge.width = E(g)$value * edgeScale, edge.arrow.size=E(g)$value * edgeScale * 0.8,
edge.color = rgb(0.2,0.2,0.2,.2),)
par(family='Apple SD Gothic Neo')
edgeScale = 0.002
plot(g, vertex.size=2,
vertex.label.family='Apple SD Gothic Neo', vertex.label.cex=2,
edge.width = E(g)$value * edgeScale, edge.arrow.size=E(g)$value * edgeScale * 0.4,
edge.color = rgb(0.2,0.2,0.2,.2))
devtools::install_github("yonghah/healthInstR")
devtools::install_github("yonghah/healthInstKr")
plot(cars)
# devtools::install_github("yonghah/healthInstKr")
library(healthInstKr)
df_bogeonso <- get_health_inst(71)
# devtools::install_github("yonghah/healthInstKr")
library(healthInstKr)
library(dply)
# devtools::install_github("yonghah/healthInstKr")
library(healthInstKr)
library(dplyr)
library(httr)
df_bogeonso <- get_health_inst(71)
View(df_bogeonso)
View(df_bogeonso)
head(df_bogeonso)
m <- leaflet() %>%
addTiles() %>%
setView(lng = 127.5, lat = 36, zoom = 7)
install.packages("leaflet")
library(leaflet)
m <- leaflet() %>%
addTiles() %>%
setView(lng = 127.5, lat = 36, zoom = 7)
library(leaflet)
m <- leaflet() %>%
addTiles() %>%
setView(lng = 127.5, lat = 36, zoom = 7)
m
library(leaflet)
m <- leaflet() %>%
addTiles() %>%
setView(lng = 127.5, lat = 36, zoom = 15)
m
library(leaflet)
m <- leaflet() %>%
addTiles() %>%
setView(lng = 127.5, lat = 36, zoom = 12)
m
library(leaflet)
m <- leaflet() %>%
addTiles() %>%
setView(lng = 127.5, lat = 36, zoom = 10)
m
library(leaflet)
m <- leaflet() %>%
addTiles() %>%
setView(lng = 127.5, lat = 37, zoom = 10)
m
library(leaflet)
m <- leaflet() %>%
addTiles() %>%
setView(lng = 127.5, lat = 36, zoom = 10)
m
library(leaflet)
m <- leaflet() %>%
addTiles() %>%
setView(lng = 127.5, lat = 36, zoom = 7)
m
library(leaflet)
m <- leaflet() %>%
addProviderTiles("Stamen.Watercolor") %>%
setView(lng = 127.5, lat = 36, zoom = 7)
m
addMarkers(m, lng = df_bogeonso$x_pos, lat=df_bogeonso$y_pos)
addMarkers(m, lng = df_bogeonso$x_pos, lat=df_bogeonso$y_pos, popup = df_bogeonso$yadm_nm)
addMarkers(m,
lng = df_bogeonso$x_pos,
lat=df_bogeonso$y_pos,
color='red',
popup = df_bogeonso$yadm_nm)
addMarkers(m,
lng = df_bogeonso$x_pos,
lat=df_bogeonso$y_pos,
popup = df_bogeonso$yadm_nm)
addMarkers(m,
lng = df_bogeonso$x_pos,
lat=df_bogeonso$y_pos,
popup = df_bogeonso$yadm_nm)
addCircleMarkers(m, lng = df_bogeonso$x_pos, lat=df_bogeonso$y_pos,
radius = 2,
stroke = FALSE,
fillOpacity = 0.4)
addCircleMarkers(m, lng = df_bogeonso$x_pos, lat=df_bogeonso$y_pos,
radius = 2,
color="red"
stroke = FALSE,
addCircleMarkers(m, lng = df_bogeonso$x_pos, lat=df_bogeonso$y_pos,
radius = 2,
color="red",
stroke = FALSE,
fillOpacity = 0.6)
# function getting voronoi polygon dataframe
df_to_voronoi_polygon <- function(df) {
vor_data <- df %>% select(x_pos, y_pos)
sp <- SpatialPointsDataFrame(cbind(vor_data$x_pos,
vor_data$y_pos),
vor_data, match.ID=TRUE)
vor_desc <- tile.list(deldir(sp@coords[,1], sp@coords[,2]))
lapply(1:(length(vor_desc)), function(i) {
tmp <- cbind(vor_desc[[i]]$x, vor_desc[[i]]$y)
tmp <- rbind(tmp, tmp[1,])
Polygons(list(Polygon(tmp)), ID=i)
}) -> vor_polygons
raw_gons <- SpatialPolygons(raw_polygons)
return(vor.spdf)
}
spdf <- df_to_voronoi_polygon(df_bogeonso)
library(sp)
# function getting voronoi polygon dataframe
df_to_voronoi_polygon <- function(df) {
vor_data <- df %>% select(x_pos, y_pos)
sp <- SpatialPointsDataFrame(cbind(vor_data$x_pos,
vor_data$y_pos),
vor_data, match.ID=TRUE)
vor_desc <- tile.list(deldir(sp@coords[,1], sp@coords[,2]))
lapply(1:(length(vor_desc)), function(i) {
tmp <- cbind(vor_desc[[i]]$x, vor_desc[[i]]$y)
tmp <- rbind(tmp, tmp[1,])
Polygons(list(Polygon(tmp)), ID=i)
}) -> vor_polygons
raw_gons <- SpatialPolygons(raw_polygons)
return(vor.spdf)
}
spdf <- df_to_voronoi_polygon(df_bogeonso)
library(sp)
library(deldir)
library(sp)
# function getting voronoi polygon dataframe
df_to_voronoi_polygon <- function(df) {
vor_data <- df %>% select(x_pos, y_pos)
sp <- SpatialPointsDataFrame(cbind(vor_data$x_pos,
vor_data$y_pos),
vor_data, match.ID=TRUE)
vor_desc <- tile.list(deldir(sp@coords[,1], sp@coords[,2]))
lapply(1:(length(vor_desc)), function(i) {
tmp <- cbind(vor_desc[[i]]$x, vor_desc[[i]]$y)
tmp <- rbind(tmp, tmp[1,])
Polygons(list(Polygon(tmp)), ID=i)
}) -> vor_polygons
raw_gons <- SpatialPolygons(raw_polygons)
return(vor.spdf)
}
spdf <- df_to_voronoi_polygon(df_bogeonso)
df <- df_bogeonso %>%
filter(x_pos != '') %>%
filter(y_pos != '') %>%
mutate(x_pos = as.numeric(x_pos), y_pos = as.numeric(y_pos))
df <- df_bogeonso %>%
filter(x_pos != '') %>%
filter(y_pos != '') %>%
mutate(x_pos = as.double(x_pos), y_pos = as.double(y_pos))
spdf <- df_to_voronoi_polygon(df_bogeonso)
df_bogeonso
df_bogeonso$x_pos
as.numeric(df_bogeonso$x_pos)
df <- df_bogeonso %>%
filter(x_pos != '') %>%
filter(y_pos != '') %>%
mutate(x_pos = as.numeric(x_pos), y_pos = as.numeric(y_pos))
df$x_pos
spdf <- df_to_voronoi_polygon(df)
spdf <- df_to_voronoi_polygon(df)
install.packages("deldir")
library(sp)
library(deldir)
# function getting voronoi polygon dataframe
df_to_voronoi_polygon <- function(df) {
vor_data <- df %>% select(x_pos, y_pos)
sp <- SpatialPointsDataFrame(cbind(vor_data$x_pos,
vor_data$y_pos),
vor_data, match.ID=TRUE)
vor_desc <- tile.list(deldir(sp@coords[,1], sp@coords[,2]))
lapply(1:(length(vor_desc)), function(i) {
tmp <- cbind(vor_desc[[i]]$x, vor_desc[[i]]$y)
tmp <- rbind(tmp, tmp[1,])
Polygons(list(Polygon(tmp)), ID=i)
}) -> vor_polygons
raw_gons <- SpatialPolygons(raw_polygons)
return(vor.spdf)
}
df <- df_bogeonso %>%
filter(x_pos != '') %>%
filter(y_pos != '') %>%
mutate(x_pos = as.numeric(x_pos), y_pos = as.numeric(y_pos))
spdf <- df_to_voronoi_polygon(df)
library(sp)
library(deldir)
# function getting voronoi polygon dataframe
df_to_voronoi_polygon <- function(df) {
vor_data <- df %>% select(x_pos, y_pos)
sp <- SpatialPointsDataFrame(cbind(vor_data$x_pos,
vor_data$y_pos),
vor_data, match.ID=TRUE)
vor_desc <- tile.list(deldir(sp@coords[,1], sp@coords[,2]))
lapply(1:(length(vor_desc)), function(i) {
tmp <- cbind(vor_desc[[i]]$x, vor_desc[[i]]$y)
tmp <- rbind(tmp, tmp[1,])
Polygons(list(Polygon(tmp)), ID=i)
}) -> vor_polygons
raw_gons <- SpatialPolygons(raw_gons)
return(vor.spdf)
}
df <- df_bogeonso %>%
filter(x_pos != '') %>%
filter(y_pos != '') %>%
mutate(x_pos = as.numeric(x_pos), y_pos = as.numeric(y_pos))
spdf <- df_to_voronoi_polygon(df)
library(sp)
library(deldir)
# function getting voronoi polygon dataframe
df_to_voronoi_polygon <- function(df) {
vor_data <- df %>% select(x_pos, y_pos)
sp <- SpatialPointsDataFrame(cbind(vor_data$x_pos,
vor_data$y_pos),
vor_data, match.ID=TRUE)
vor_desc <- tile.list(deldir(sp@coords[,1], sp@coords[,2]))
lapply(1:(length(vor_desc)), function(i) {
tmp <- cbind(vor_desc[[i]]$x, vor_desc[[i]]$y)
tmp <- rbind(tmp, tmp[1,])
Polygons(list(Polygon(tmp)), ID=i)
}) -> vor_polygons
raw_gons <- SpatialPolygons(vor_polygons)
vor.spdf<-SpatialPolygonsDataFrame(raw_gons, data=p.df)
return(vor.spdf)
}
df <- df_bogeonso %>%
filter(x_pos != '') %>%
filter(y_pos != '') %>%
mutate(x_pos = as.numeric(x_pos), y_pos = as.numeric(y_pos))
spdf <- df_to_voronoi_polygon(df)
library(sp)
library(deldir)
# function getting voronoi polygon dataframe
df_to_voronoi_polygon <- function(df) {
vor_data <- df %>% select(x_pos, y_pos)
sp <- SpatialPointsDataFrame(cbind(vor_data$x_pos,
vor_data$y_pos),
vor_data, match.ID=TRUE)
vor_desc <- tile.list(deldir(sp@coords[,1], sp@coords[,2]))
lapply(1:(length(vor_desc)), function(i) {
tmp <- cbind(vor_desc[[i]]$x, vor_desc[[i]]$y)
tmp <- rbind(tmp, tmp[1,])
Polygons(list(Polygon(tmp)), ID=i)
}) -> vor_polygons
raw_gons <- SpatialPolygons(vor_polygons)
pid <- sapply(slot(raw_gons, "polygons"), function(x) slot(x, "ID"))
p.df <- data.frame( ID=1:length(raw_gons), row.names = pid)
vor.spdf<-SpatialPolygonsDataFrame(raw_gons, data=p.df)
return(vor.spdf)
}
df <- df_bogeonso %>%
filter(x_pos != '') %>%
filter(y_pos != '') %>%
mutate(x_pos = as.numeric(x_pos), y_pos = as.numeric(y_pos))
spdf <- df_to_voronoi_polygon(df)
addPolygons(m, data=spdf,
stroke=TRUE, color="#88FF33", weight=0.5,
fill=TRUE, fillOpacity = 0.0,
smoothFactor=0.5)
library(leaflet)
m <- leaflet() %>%
addTiles() %>%
# addProviderTiles("Stamen.Watercolor")
setView(lng = 127.5, lat = 36, zoom = 7)
m
df <- df_bogeonso %>%
filter(x_pos != '') %>%
filter(y_pos != '') %>%
mutate(x_pos = as.numeric(x_pos), y_pos = as.numeric(y_pos))
spdf <- df_to_voronoi_polygon(df)
addPolygons(m, data=spdf,
stroke=TRUE, color="#FF2233", weight=0.5,
fill=TRUE, fillOpacity = 0.0,
smoothFactor=0.5)
library(leaflet)
m <- leaflet() %>%
# addTiles() %>%
addProviderTiles("Stamen.Watercolor")
setView(lng = 127.5, lat = 36, zoom = 7)
library(leaflet)
m <- leaflet() %>%
# addTiles() %>%
addProviderTiles("Stamen.Watercolor") %>%
setView(lng = 127.5, lat = 36, zoom = 7)
m
df <- df_bogeonso %>%
filter(x_pos != '') %>%
filter(y_pos != '') %>%
mutate(x_pos = as.numeric(x_pos), y_pos = as.numeric(y_pos))
spdf <- df_to_voronoi_polygon(df)
addPolygons(m, data=spdf,
stroke=TRUE, color="#FF2233", weight=1,
fill=TRUE, fillOpacity = 0.0,
smoothFactor=0.5)
df <- df_bogeonso %>%
filter(x_pos != '') %>%
filter(y_pos != '') %>%
mutate(x_pos = as.numeric(x_pos), y_pos = as.numeric(y_pos))
spdf <- df_to_voronoi_polygon(df)
addPolygons(m, data=spdf,
stroke=TRUE, color="#3322FF", weight=2,
fill=TRUE, fillOpacity = 0.0,
smoothFactor=0.5)
df_to_voronoi_polygon <- function(df) {
vor_data <- df %>% select(x_pos, y_pos)
sp <- SpatialPointsDataFrame(cbind(vor_data$x_pos,
vor_data$y_pos),
vor_data, match.ID=TRUE)
vor_desc <- tile.list(deldir(sp@coords[,1], sp@coords[,2]))
lapply(1:(length(vor_desc)), function(i) {
tmp <- cbind(vor_desc[[i]]$x, vor_desc[[i]]$y)
tmp <- rbind(tmp, tmp[1,])
Polygons(list(Polygon(tmp)), ID=i)
}) -> vor_polygons
raw_gons <- SpatialPolygons(vor_polygons)
# clip voronoi polygons
vor_gons <- gIntersection(korea_gon, raw_gons, byid=TRUE)
pid <- sapply(slot(vor_gons, "polygons"), function(x) slot(x, "ID"))
p.df <- data.frame( ID=1:length(vor_gons), row.names = pid)
vor.spdf<-SpatialPolygonsDataFrame(vor_gons, data=p.df)
return(vor.spdf)
}
spdf <- df_to_voronoi_polygon(df)
library(rgeos)
install.packages("rgeos")
library(rgeos)
df_to_voronoi_polygon <- function(df, boundary) {
vor_data <- df %>% select(x_pos, y_pos)
sp <- SpatialPointsDataFrame(cbind(vor_data$x_pos,
vor_data$y_pos),
vor_data, match.ID=TRUE)
vor_desc <- tile.list(deldir(sp@coords[,1], sp@coords[,2]))
lapply(1:(length(vor_desc)), function(i) {
tmp <- cbind(vor_desc[[i]]$x, vor_desc[[i]]$y)
tmp <- rbind(tmp, tmp[1,])
Polygons(list(Polygon(tmp)), ID=i)
}) -> vor_polygons
raw_gons <- SpatialPolygons(vor_polygons)
# clip voronoi polygons
vor_gons <- gIntersection(boundary, raw_gons, byid=TRUE)
pid <- sapply(slot(vor_gons, "polygons"), function(x) slot(x, "ID"))
p.df <- data.frame( ID=1:length(vor_gons), row.names = pid)
vor.spdf<-SpatialPolygonsDataFrame(vor_gons, data=p.df)
return(vor.spdf)
}
korea <- map("world2Hires", "South Korea", fill=TRUE, plot=FALSE)
library(map)
install.packages("map")
library(map)
install.packages("maps")
library(maps)
korea <- map("world2Hires", "South Korea", fill=TRUE, plot=FALSE)
install.packages("mapdata")
library(mapdata)
korea <- map("world2Hires", "South Korea", fill=TRUE, plot=FALSE)
korea_gon <- map2SpatialPolygons(korea, sub(":.*$", "", korea$names))
library(mapdata)
library(maps)
korea <- map("world2Hires", "South Korea", fill=TRUE, plot=FALSE)
korea_gon <- map2SpatialPolygons(korea, sub(":.*$", "", korea$names))
install.packages("maptools")
library(mapdata)
library(maps)
library(maptools)
korea <- map("world2Hires", "South Korea", fill=TRUE, plot=FALSE)
korea_gon <- map2SpatialPolygons(korea, sub(":.*$", "", korea$names))
spdf <- df_to_voronoi_polygon(df)
library(mapdata)
library(maps)
library(maptools)
korea <- map("world2Hires", "South Korea", fill=TRUE, plot=FALSE)
korea_gon <- map2SpatialPolygons(korea, sub(":.*$", "", korea$names))
spdf <- df_to_voronoi_polygon(df, korea_gon)
addPolygons(m, data=spdf,
stroke=TRUE, color="#3322FF", weight=2,
fill=TRUE, fillOpacity = 0.0,
smoothFactor=0.5)
sdpf
spdf
head(spdf)
library(rgdal)
install.packages("rgdal")
map(usa)
map("usa")
map("kroea")
map("korea")
map("south korea")
map("South Korea")
.Library
system.file("shapes")
system.file("shapes", package="maptools")
install.package("ineq")
install.packages("ineq")
data()
ChickWeight
df <- ChickWeight
View(df)
View(df)
df <- iris
View(df)
View(df)
df <- iris3
df <- iris
df <- precip
View(df)
precip
quakes
df <- quakes
library(ggplot2)
ggplot(df, aes(x=long,y=lat)) + geom_density2d()
ggplot(df, aes(x=long,y=lat)) + geom_point()
ggplot(df, aes(x=long,y=lat)) + geom_point(alpha=0.5)
ggplot(df, aes(x=long,y=lat)) + geom_point(alpha=0.5, size=1)
ggplot(df, aes(x=long,y=lat)) + geom_point(alpha=0.3, size=1)
ggplot(df, aes(x=long,y=lat)) + geom_point(alpha=0.3, size=1) + geom_contour()
ggplot(df, aes(x=long,y=lat)) + geom_point(alpha=0.3, size=1) + geom_density2d()
ggplot(df, aes(x=long,y=lat)) + geom_point(alpha=0.3, size=1) + geom_bin2d()
ggplot(df, aes(x=long,y=lat)) + geom_point(alpha=0.3, size=1) + geom_hex()
ggplot(df, aes(x=long,y=lat)) + geom_point(alpha=0.3, size=1) + geom_bin2d()
ggplot(df, aes(x=long,y=lat)) + geom_point(alpha=0.3, size=1) + geom_rug()
ggplot(df, aes(x=long,y=lat)) + geom_point(alpha=0.3, size=1) + geom_rug(alpha=0.2)
ggplot(df, aes(x=long,y=lat)) + geom_point(alpha=0.3, size=1) + geom_rug(alpha=0.2) + geom_contour(mag)
ggplot(df, aes(x=long,y=lat)) + geom_point(alpha=0.3, size=1) + geom_rug(alpha=0.2) + geom_contour(df$mag)
ggplot(df, aes(x=long,y=lat)) + geom_point(alpha=0.3, size=1) + geom_rug(alpha=0.2) + geom_contour(aes(df$mag)
)
ggplot(df, aes(x=long,y=lat)) + geom_point(alpha=0.3, size=1) + geom_rug(alpha=0.2) + geom_contour(aes(mag)
)
ggplot(df, aes(x=long,y=lat, z=mag)) + geom_point(alpha=0.3, size=1) + geom_rug(alpha=0.2) + geom_contour(aes(mag)
)
ggplot(df, aes(x=long,y=lat, z=mag)) + geom_contour()
ggplot(df, aes(x=long,y=lat)) + geom_contour(aes(z=mag))
ggplot(df, aes(x=long,y=lat)) + geom_contour(aes(z=depth))
faithfuld
faithful
ggplot(df, aes(x=long,y=lat)) + geom_contour(aes(z=depth))
ggplot(df, aes(x=long,y=lat)) + geom_point(alpha=0.3, size=1) + geom_density2d()
ggplot(df, aes(x=long,y=lat)) + geom_point(alpha=0.3, size=1) + geom_density2d(bins=2)
ggplot(df, aes(x=long,y=lat)) + geom_point(alpha=0.3, size=1) + geom_density2d(bins=20)
ggplot(df, aes(x=long,y=lat)) + geom_point(alpha=0.2, size=0.1) + geom_density2d(bins=20)
ggplot(df, aes(x=long,y=lat)) + geom_point(alpha=0.2, size=0.1) + geom_density2d(bins=20, colour = ..level..)
ggplot(df, aes(x=long,y=lat)) + geom_point(alpha=0.2, size=0.1) + geom_density2d(bins=20, aes(colour = ..level..))
knitr::opts_chunk$set(echo = TRUE)
head(quakes)
df <- quakes
head(df)
knitr::opts_chunk$set(echo = TRUE)
df <- quakes
head(df)
ggplot(df, aes(x=long, y=lat)) + geom_point()
p <- ggplot(df, aes(x=long, y=lat))
p + geom_point()
p + geom_density2d()
p + geom_density2d()
p + geom_point(alpha=0.2, size=0.1) + geom_density2d(bins=20, colour = ..level..)
p + geom_density2d()
p + geom_point(alpha=0.2, size=0.1) + geom_density2d(bins=20, aes(colour = ..level..))
p + geom_density2d()
p + geom_point(alpha=0.2, size=0.1) + geom_density2d(bins=20, aes(fill = ..level..))
p + geom_density2d()
p + geom_point(alpha=0.2, size=0.1) + geom_density2d(bins=20, aes(fill = ..level..), geom="polygon")
p + geom_density2d()
p + geom_point(alpha=0.2, size=0.1) + stat_density2d(bins=20, aes(fill = ..level..), geom="polygon")
p + geom_density2d()
p + stat_density2d(bins=10, aes(fill = ..level..), geom="polygon")
p + geom_density2d()
p + stat_density2d(bins=10, aes(fill = ..level..), geom="polygon") + scale_fill_brewer(palette = "Spectral")
p + geom_density2d()
p + stat_density2d(bins=10, aes(fill = ..level..), geom="polygon") + scale_fill_distiller(palette = "Spectral")
p + geom_density2d()
p + stat_density2d(bins=20, aes(fill = ..level..), geom="polygon") + scale_fill_distiller(palette = "Spectral")
p + geom_density2d()
p + stat_density2d(bins=15, aes(fill = ..level..), geom="polygon") + scale_fill_distiller(palette = "Spectral")
p + geom_density2d()
p + stat_density2d(bins=15, aes(fill = ..level..), geom="polygon") + scale_fill_distiller(palette = "Spectral")
